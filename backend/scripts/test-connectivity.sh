#!/bin/bash

# =====================================================
# SCRIPT DE TESTES DE CONECTIVIDADE - ENTREG√ÅVEL 1
# ATENDEAI 2.0
# =====================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# =====================================================
# VERIFICA√á√ïES INICIAIS
# =====================================================

log "üß™ Iniciando testes de conectividade - AtendeAI 2.0"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando. Por favor, inicie o Docker e tente novamente."
    exit 1
fi

# Verificar se os containers est√£o rodando
if ! docker-compose ps | grep -q "Up"; then
    error "Containers n√£o est√£o rodando. Execute 'docker-compose up -d' primeiro."
    exit 1
fi

# =====================================================
# TESTES DE CONECTIVIDADE
# =====================================================

log "üîç Testando conectividade entre servi√ßos..."

# Teste 1: PostgreSQL
log "üìä Testando PostgreSQL..."
if docker exec atendeai-postgres pg_isready -U postgres -d atendeai > /dev/null 2>&1; then
    log "‚úÖ PostgreSQL: OK"
else
    error "‚ùå PostgreSQL: FALHOU"
    exit 1
fi

# Teste 2: Redis
log "üî¥ Testando Redis..."
if docker exec atendeai-redis redis-cli --raw incr ping > /dev/null 2>&1; then
    log "‚úÖ Redis: OK"
else
    error "‚ùå Redis: FALHOU"
    exit 1
fi

# Teste 3: Kong API Gateway
log "üö™ Testando Kong API Gateway..."
if curl -s http://localhost:8001/status > /dev/null 2>&1; then
    log "‚úÖ Kong API Gateway: OK"
else
    warn "‚ö†Ô∏è Kong API Gateway: N√£o respondendo (pode estar inicializando)"
fi

# Teste 4: Prometheus
log "üìà Testando Prometheus..."
if curl -s http://localhost:9090/-/healthy > /dev/null 2>&1; then
    log "‚úÖ Prometheus: OK"
else
    warn "‚ö†Ô∏è Prometheus: N√£o respondendo (pode estar inicializando)"
fi

# Teste 5: Grafana
log "üìä Testando Grafana..."
if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    log "‚úÖ Grafana: OK"
else
    warn "‚ö†Ô∏è Grafana: N√£o respondendo (pode estar inicializando)"
fi

# Teste 6: HAProxy
log "‚öñÔ∏è Testando HAProxy..."
if curl -s http://localhost:80 > /dev/null 2>&1; then
    log "‚úÖ HAProxy: OK"
else
    warn "‚ö†Ô∏è HAProxy: N√£o respondendo (pode estar inicializando)"
fi

# =====================================================
# TESTES DE SERVI√áOS
# =====================================================

log "üîß Testando servi√ßos individuais..."

# Teste 7: Auth Service
log "üîê Testando Auth Service..."
if curl -s http://localhost:3001/health > /dev/null 2>&1; then
    log "‚úÖ Auth Service: OK"
else
    warn "‚ö†Ô∏è Auth Service: N√£o respondendo (pode estar inicializando)"
fi

# Teste 8: Clinic Service
log "üè• Testando Clinic Service..."
if curl -s http://localhost:3003/health > /dev/null 2>&1; then
    log "‚úÖ Clinic Service: OK"
else
    warn "‚ö†Ô∏è Clinic Service: N√£o respondendo (pode estar inicializando)"
fi

# Teste 9: Health Service
log "üíö Testando Health Service..."
if curl -s http://localhost:3004/health > /dev/null 2>&1; then
    log "‚úÖ Health Service: OK"
else
    warn "‚ö†Ô∏è Health Service: N√£o respondendo (pode estar inicializando)"
fi

# =====================================================
# TESTES DE REDE
# =====================================================

log "üåê Testando comunica√ß√£o entre containers..."

# Teste 10: Comunica√ß√£o entre servi√ßos
log "üîó Testando comunica√ß√£o Auth Service -> PostgreSQL..."
if docker exec atendeai-auth-service curl -s http://postgres:5432 > /dev/null 2>&1; then
    log "‚úÖ Auth Service -> PostgreSQL: OK"
else
    warn "‚ö†Ô∏è Auth Service -> PostgreSQL: N√£o conectando (esperado)"
fi

# Teste 11: Comunica√ß√£o entre servi√ßos
log "üîó Testando comunica√ß√£o Auth Service -> Redis..."
if docker exec atendeai-auth-service curl -s http://redis:6379 > /dev/null 2>&1; then
    log "‚úÖ Auth Service -> Redis: OK"
else
    warn "‚ö†Ô∏è Auth Service -> Redis: N√£o conectando (esperado)"
fi

# =====================================================
# TESTES DE PERFORMANCE
# =====================================================

log "‚ö° Testando performance b√°sica..."

# Teste 12: Tempo de resposta do Auth Service
log "‚è±Ô∏è Testando tempo de resposta do Auth Service..."
RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:3001/health)
if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
    log "‚úÖ Auth Service Response Time: ${RESPONSE_TIME}s (OK)"
else
    warn "‚ö†Ô∏è Auth Service Response Time: ${RESPONSE_TIME}s (Lento)"
fi

# =====================================================
# RELAT√ìRIO FINAL
# =====================================================

log "üìã Relat√≥rio de Conectividade:"
log "=================================="

# Contar containers rodando
RUNNING_CONTAINERS=$(docker-compose ps --services --filter "status=running" | wc -l)
TOTAL_SERVICES=$(docker-compose ps --services | wc -l)

log "üìä Containers rodando: $RUNNING_CONTAINERS/$TOTAL_SERVICES"

if [ "$RUNNING_CONTAINERS" -eq "$TOTAL_SERVICES" ]; then
    log "üéâ Todos os servi√ßos est√£o rodando!"
else
    warn "‚ö†Ô∏è Alguns servi√ßos n√£o est√£o rodando. Verifique os logs."
fi

log "‚úÖ Testes de conectividade conclu√≠dos!"
log "üí° Para ver logs detalhados: docker-compose logs [service-name]"
log "üí° Para reiniciar um servi√ßo: docker-compose restart [service-name]"
