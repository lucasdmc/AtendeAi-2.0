#!/usr/bin/env node

/**
 * SCRIPT DE TESTE DE CONEX√ïES DE BANCO DE DADOS
 * ATENDEAI 2.0 - VALIDA√á√ÉO P√ìS-CORRE√á√ïES
 * 
 * Este script testa as conex√µes de todos os servi√ßos com o banco Supabase
 * ap√≥s as corre√ß√µes de configura√ß√£o implementadas.
 */

import { Pool } from 'pg';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o do banco
const DATABASE_URL = process.env.DATABASE_URL || 'postgresql://postgres:Supa201294base@db.kytphnasmdvebmdvvwtx.supabase.co:5432/postgres';

console.log('üîß TESTE DE CONEX√ïES DE BANCO DE DADOS - ATENDEAI 2.0');
console.log('====================================================');
console.log(`üìÖ Data: ${new Date().toISOString()}`);
console.log(`üîó DATABASE_URL: ${DATABASE_URL.replace(/:[^:@]*@/, ':***@')}`);
console.log('');

async function testDatabaseConnection() {
  const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: DATABASE_URL.includes('supabase') ? {
      rejectUnauthorized: false
    } : false,
    max: 1,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 10000,
  });

  try {
    console.log('üîÑ Testando conex√£o com Supabase...');
    
    // Teste b√°sico de conex√£o
    const client = await pool.connect();
    console.log('‚úÖ Conex√£o estabelecida com sucesso');
    
    // Teste de query b√°sica
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log(`‚úÖ Query executada: ${result.rows[0].current_time}`);
    console.log(`üìä PostgreSQL Version: ${result.rows[0].pg_version.split(' ')[0]}`);
    
    // Teste de acesso ao schema atendeai
    const schemaResult = await client.query(`
      SELECT table_name, table_schema 
      FROM information_schema.tables 
      WHERE table_schema = 'atendeai' 
      ORDER BY table_name
    `);
    
    console.log(`‚úÖ Schema 'atendeai' acess√≠vel - ${schemaResult.rows.length} tabelas encontradas:`);
    schemaResult.rows.forEach(row => {
      console.log(`   üìã ${row.table_name}`);
    });
    
    // Teste de dados existentes
    const dataResult = await client.query(`
      SELECT 
        'clinics' as table_name, COUNT(*) as count FROM atendeai.clinics
      UNION ALL
      SELECT 'users', COUNT(*) FROM atendeai.users
      UNION ALL  
      SELECT 'roles', COUNT(*) FROM atendeai.roles
      UNION ALL
      SELECT 'permissions', COUNT(*) FROM atendeai.permissions
      ORDER BY table_name
    `);
    
    console.log('\nüìä Dados existentes no schema atendeai:');
    dataResult.rows.forEach(row => {
      console.log(`   ${row.table_name}: ${row.count} registros`);
    });
    
    // Teste de tabelas migradas
    const migratedResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'atendeai' 
      AND table_name IN ('conversations', 'messages', 'appointments', 'professionals', 'services')
      ORDER BY table_name
    `);
    
    console.log('\nüîÑ Tabelas migradas encontradas:');
    if (migratedResult.rows.length > 0) {
      migratedResult.rows.forEach(row => {
        console.log(`   ‚úÖ ${row.table_name}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è  Nenhuma tabela migrada encontrada');
    }
    
    client.release();
    
  } catch (error) {
    console.error('‚ùå Erro na conex√£o com o banco:', error.message);
    console.error('üîç Detalhes:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

async function testServiceConfigurations() {
  console.log('\nüîß TESTANDO CONFIGURA√á√ïES DOS SERVI√áOS');
  console.log('========================================');
  
  const services = [
    'auth-service',
    'clinic-service', 
    'whatsapp-service',
    'conversation-service',
    'appointment-service'
  ];
  
  for (const service of services) {
    try {
      const configPath = path.join(__dirname, '..', 'backend', 'services', service, 'src', 'config', 'index.js');
      const config = await import(configPath);
      
      console.log(`\nüìã ${service.toUpperCase()}:`);
      
      if (config.default.database && config.default.database.url) {
        console.log(`   ‚úÖ Configura√ß√£o DATABASE_URL encontrada`);
        console.log(`   üîó URL: ${config.default.database.url.replace(/:[^:@]*@/, ':***@')}`);
      } else {
        console.log(`   ‚ùå Configura√ß√£o DATABASE_URL n√£o encontrada`);
      }
      
      if (config.default.database && config.default.database.max) {
        console.log(`   ‚úÖ Pool de conex√µes configurado (max: ${config.default.database.max})`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro ao carregar configura√ß√£o: ${error.message}`);
    }
  }
}

async function main() {
  try {
    await testDatabaseConnection();
    await testServiceConfigurations();
    
    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('================================');
    console.log('‚úÖ Todas as conex√µes est√£o funcionando');
    console.log('‚úÖ Configura√ß√µes dos servi√ßos est√£o corretas');
    console.log('‚úÖ Schema consolidado est√° acess√≠vel');
    console.log('\nüöÄ Sistema pronto para deploy!');
    
  } catch (error) {
    console.error('\nüí• FALHA NO TESTE');
    console.error('==================');
    console.error('‚ùå Erro:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { testDatabaseConnection, testServiceConfigurations };
