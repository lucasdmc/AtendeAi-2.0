#!/bin/bash

# =====================================================
# SCRIPT DE VERIFICA√á√ÉO DE CONFIGURA√á√ïES
# ATENDEAI 2.0
# =====================================================

echo "üîç Verificando configura√ß√µes do AtendeAI 2.0..."
echo "====================================================="

# Verificar se o arquivo .env existe
if [ ! -f ".env" ]; then
    echo "‚ùå Arquivo .env n√£o encontrado!"
    echo "   Execute: cp env.config .env"
    exit 1
fi

echo "‚úÖ Arquivo .env encontrado"

# Carregar vari√°veis do .env
source .env

# Fun√ß√£o para verificar vari√°vel
check_var() {
    local var_name=$1
    local var_value=${!var_name}
    local required=$2
    
    if [ -z "$var_value" ] || [ "$var_value" = "your_*" ] || [ "$var_value" = "*_here" ]; then
        if [ "$required" = "true" ]; then
            echo "‚ùå $var_name: N√ÉO CONFIGURADO (OBRIGAT√ìRIO)"
            return 1
        else
            echo "‚ö†Ô∏è  $var_name: N√ÉO CONFIGURADO (OPCIONAL)"
            return 0
        fi
    else
        echo "‚úÖ $var_name: CONFIGURADO"
        return 0
    fi
}

echo ""
echo "üîë VERIFICANDO API KEYS OBRIGAT√ìRIAS:"
echo "----------------------------------------"

errors=0

# OpenAI API
check_var "OPENAI_API_KEY" "true" || ((errors++))

# WhatsApp
check_var "WHATSAPP_ACCESS_TOKEN" "true" || ((errors++))
check_var "WHATSAPP_PHONE_NUMBER_ID" "true" || ((errors++))
check_var "WHATSAPP_BUSINESS_ACCOUNT_ID" "true" || ((errors++))

# Google Calendar
check_var "GOOGLE_CLIENT_ID" "true" || ((errors++))
check_var "GOOGLE_CLIENT_SECRET" "true" || ((errors++))
check_var "GOOGLE_API_KEY" "true" || ((errors++))

echo ""
echo "üóÑÔ∏è  VERIFICANDO CONFIGURA√á√ïES DE BANCO:"
echo "----------------------------------------"

# Supabase
check_var "SUPABASE_URL" "true" || ((errors++))
check_var "SUPABASE_ANON_KEY" "true" || ((errors++))
check_var "SUPABASE_SERVICE_ROLE_KEY" "true" || ((errors++))

# Database
check_var "DATABASE_URL" "true" || ((errors++))

echo ""
echo "üîê VERIFICANDO CONFIGURA√á√ïES DE SEGURAN√áA:"
echo "--------------------------------------------"

# JWT
check_var "JWT_SECRET" "true" || ((errors++))

# Webhook
check_var "WHATSAPP_WEBHOOK_VERIFY_TOKEN" "true" || ((errors++))
check_var "WEBHOOK_SIGNATURE_SECRET" "true" || ((errors++))

echo ""
echo "üåê VERIFICANDO CONFIGURA√á√ïES DE SERVI√áOS:"
echo "-------------------------------------------"

# URLs dos servi√ßos
check_var "CLINIC_SERVICE_URL" "false"
check_var "CONVERSATION_SERVICE_URL" "false"
check_var "APPOINTMENT_SERVICE_URL" "false"

# Portas
check_var "WHATSAPP_SERVICE_PORT" "false"
check_var "GOOGLE_CALENDAR_SERVICE_PORT" "false"

echo ""
echo "üìä RESUMO DA VERIFICA√á√ÉO:"
echo "=========================="

if [ $errors -eq 0 ]; then
    echo "üéâ TODAS AS CONFIGURA√á√ïES OBRIGAT√ìRIAS EST√ÉO CORRETAS!"
    echo ""
    echo "üöÄ Voc√™ pode iniciar o sistema:"
    echo "   docker-compose up -d"
    echo ""
    echo "üß™ Teste os servi√ßos:"
    echo "   ./scripts/setup-whatsapp-google.sh"
else
    echo "‚ùå ENCONTRADOS $errors ERROS DE CONFIGURA√á√ÉO"
    echo ""
    echo "üîß Configure as vari√°veis obrigat√≥rias no arquivo .env"
    echo "üìñ Consulte: CONFIGURACOES_PENDENTES.md"
    echo ""
    echo "‚ö†Ô∏è  Vari√°veis que come√ßam com 'your_' ou terminam com '_here' precisam ser configuradas"
fi

echo ""
echo "üìù PR√ìXIMOS PASSOS:"
echo "===================="

if [ $errors -eq 0 ]; then
    echo "1. ‚úÖ Configura√ß√µes verificadas"
    echo "2. üöÄ Iniciar infraestrutura: docker-compose up -d redis kong"
    echo "3. üîß Iniciar servi√ßos: docker-compose up -d auth-service clinic-service conversation-service appointment-service"
    echo "4. üì± Iniciar integra√ß√µes: docker-compose up -d whatsapp-service google-calendar-service"
    echo "5. üß™ Testar: ./scripts/setup-whatsapp-google.sh"
else
    echo "1. ‚ùå Corrigir configura√ß√µes no arquivo .env"
    echo "2. üîç Executar este script novamente: ./scripts/verify-config.sh"
    echo "3. üìñ Ler: CONFIGURACOES_PENDENTES.md"
    echo "4. üöÄ Ap√≥s corrigir, iniciar o sistema"
fi

echo ""
echo "====================================================="
exit $errors
