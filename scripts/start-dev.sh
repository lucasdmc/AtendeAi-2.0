#!/bin/bash

# =====================================================
# SCRIPT DE DESENVOLVIMENTO LOCAL - ATENDEAI 2.0
# =====================================================

set -e

echo "üîß Iniciando ambiente de desenvolvimento local..."

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Execute este script na raiz do projeto"
    exit 1
fi

# Verificar depend√™ncias
log_info "Verificando depend√™ncias..."
if [ ! -d "node_modules" ]; then
    log_warning "Instalando depend√™ncias..."
    npm install
fi

# Verificar .env
if [ ! -f ".env" ]; then
    log_warning "Criando arquivo .env..."
    cp env.railway.example .env
    log_warning "Configure as vari√°veis em .env"
fi

# Fun√ß√£o para verificar se porta est√° em uso
check_port() {
    if lsof -i :$1 >/dev/null 2>&1; then
        return 0  # Porta em uso
    else
        return 1  # Porta livre
    fi
}

# Verificar portas necess√°rias
log_info "Verificando portas dispon√≠veis..."

FRONTEND_PORT=8080
if check_port $FRONTEND_PORT; then
    log_warning "Porta $FRONTEND_PORT j√° est√° em uso"
    read -p "Deseja matar o processo? (y/n): " kill_process
    if [ "$kill_process" = "y" ]; then
        lsof -ti :$FRONTEND_PORT | xargs kill -9
        log_success "Processo na porta $FRONTEND_PORT finalizado"
    fi
fi

# Mostrar status dos servi√ßos
echo ""
log_info "Status dos microservi√ßos:"
echo "  Frontend (React):     http://localhost:$FRONTEND_PORT"
echo "  Auth Service:         http://localhost:3001"
echo "  User Service:         http://localhost:3002" 
echo "  Clinic Service:       http://localhost:3003"
echo "  Health Service:       http://localhost:3004"
echo "  Conversation Service: http://localhost:3005"
echo "  Appointment Service:  http://localhost:3006"
echo "  WhatsApp Service:     http://localhost:3007"
echo "  Google Calendar:      http://localhost:3008"
echo ""

# Op√ß√µes de inicializa√ß√£o
echo "Op√ß√µes de inicializa√ß√£o:"
echo "  1. Apenas Frontend (desenvolvimento frontend)"
echo "  2. Frontend + Microservi√ßos (sistema completo)"
echo "  3. Apenas testes (executar bateria de testes)"
echo ""

read -p "Escolha uma op√ß√£o (1-3): " option

case $option in
    1)
        log_info "Iniciando apenas o frontend..."
        log_warning "Certifique-se de que o Supabase est√° configurado em .env"
        npm run dev -- --port $FRONTEND_PORT
        ;;
    2)
        log_info "Iniciando sistema completo..."
        log_warning "Iniciando microservi√ßos em segundo plano..."
        
        # Verificar Docker
        if ! command -v docker &> /dev/null; then
            log_warning "Docker n√£o encontrado. Apenas frontend ser√° iniciado."
            npm run dev -- --port $FRONTEND_PORT
        else
            # Iniciar microservi√ßos com Docker
            log_info "Iniciando infraestrutura com Docker..."
            docker-compose up -d redis prometheus grafana
            
            # Dar tempo para inicializar
            sleep 5
            
            # Iniciar frontend
            log_success "Infraestrutura iniciada. Iniciando frontend..."
            npm run dev -- --port $FRONTEND_PORT
        fi
        ;;
    3)
        log_info "Executando bateria de testes..."
        ./scripts/test-local.sh
        ;;
    *)
        log_warning "Op√ß√£o inv√°lida. Iniciando apenas frontend..."
        npm run dev -- --port $FRONTEND_PORT
        ;;
esac
