#!/usr/bin/env node

/**
 * =====================================================
 * üöÄ ATENDEAI 2.0 - UNIFIED SERVER FOR RAILWAY
 * =====================================================
 * 
 * Servidor unificado que agrupa todos os microservi√ßos
 * para deploy simplificado no Railway.
 * 
 * Microservi√ßos inclu√≠dos:
 * - WhatsApp Service (webhooks + messaging)
 * - Conversation Service (IA + chatbot)  
 * - Clinic Service (configura√ß√µes)
 * - Health Service (monitoramento)
 * 
 * Todos rodando em um √∫nico processo para Railway.
 */

import express from 'express';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// =====================================================
// CONFIGURA√á√ÉO B√ÅSICA
// =====================================================

const app = express();
const PORT = process.env.PORT || 8080;

// Inicializar OpenAI de forma lazy (apenas quando necess√°rio)
let openai = null;

async function getOpenAI() {
  if (!openai && process.env.OPENAI_API_KEY) {
    const { default: OpenAI } = await import('openai');
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
    console.log('‚úÖ OpenAI inicializada com sucesso');
  }
  return openai;
}

// CORS simples
app.use(cors());

// Seguran√ßa b√°sica
app.use((req, res, next) => {
  res.header('X-Content-Type-Options', 'nosniff');
  res.header('X-Frame-Options', 'DENY');
  res.header('X-XSS-Protection', '1; mode=block');
  next();
});

// Middleware para parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// =====================================================
// WEBHOOK DO WHATSAPP (ROTA PRINCIPAL)
// =====================================================

app.get('/webhook/whatsapp', (req, res) => {
  const VERIFY_TOKEN = process.env.WHATSAPP_VERIFY_TOKEN || 'atendeai_webhook_verify_2024';
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode && token) {
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      console.log('‚úÖ Webhook do WhatsApp verificado com sucesso!');
      res.status(200).send(challenge);
    } else {
      console.log('‚ùå Token de verifica√ß√£o inv√°lido');
      res.sendStatus(403);
    }
  } else {
    res.sendStatus(400);
  }
});

app.post('/webhook/whatsapp', async (req, res) => {
  try {
    console.log('üì® Webhook recebido:', JSON.stringify(req.body, null, 2));
    
    // Processar mensagem do WhatsApp
    const entry = req.body.entry?.[0];
    const changes = entry?.changes?.[0];
    const value = changes?.value;
    const messages = value?.messages;

    if (messages && messages.length > 0) {
      const message = messages[0];
      const from = message.from;
      const messageText = message.text?.body;
      const messageType = message.type;

      console.log(`üì± Mensagem recebida de ${from}: ${messageText}`);

      // Simular processamento com IA (por enquanto resposta simples)
      const response = await processMessageWithAI(messageText, from);
      
      // Enviar resposta via WhatsApp API
      await sendWhatsAppMessage(from, response);
      
      console.log(`ü§ñ Resposta enviada: ${response}`);
    }

    res.status(200).send('Processado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro no webhook:', error);
    res.status(500).send('Erro interno');
  }
});

// =====================================================
// SIMULA√á√ÉO DA IA (CONVERSATION SERVICE)
// =====================================================

async function processMessageWithAI(message, from) {
  try {
    console.log(`ü§ñ Processando mensagem com OpenAI: "${message}"`);
    
    const ai = await getOpenAI();
    if (!ai) {
      console.log('‚ö†Ô∏è OpenAI n√£o dispon√≠vel, usando resposta padr√£o');
      return getFallbackResponse(message);
    }

    // Context da cl√≠nica para a IA
    const clinicContext = `
Voc√™ √© um assistente virtual da cl√≠nica AtendeAI, especializada em atendimento m√©dico de qualidade.

INFORMA√á√ïES DA CL√çNICA:
- Nome: Cl√≠nica AtendeAI
- Hor√°rios: Segunda a Sexta: 8h √†s 18h | S√°bado: 8h √†s 12h | Domingo: Fechado
- Telefone: (11) 99999-9999
- Endere√ßo: Rua da Cl√≠nica, 123
- Especialidades: Cl√≠nica Geral, Cardiologia, Ortopedia, Pediatria, Neurologia, Exames laboratoriais

PERSONALIDADE:
- Seja sempre cordial, profissional e emp√°tico
- Use emojis de forma moderada para deixar a conversa mais amig√°vel
- Ofere√ßa ajuda proativa
- Sempre tente direcionar para agendamento ou informa√ß√µes √∫teis

CAPACIDADES:
- Agendar consultas (coleta nome, telefone, especialidade, prefer√™ncia de data/hora)
- Informar sobre especialidades e servi√ßos
- Fornecer hor√°rios de funcionamento
- Dar informa√ß√µes de contato
- Orientar sobre procedimentos

IMPORTANTE: Se for uma emerg√™ncia m√©dica, oriente a procurar atendimento imediato.
`;

    const completion = await ai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: clinicContext
        },
        {
          role: "user", 
          content: message
        }
      ],
      max_tokens: 300,
      temperature: 0.7
    });

    const response = completion.choices[0].message.content;
    console.log(`‚úÖ Resposta da OpenAI: ${response}`);
    
    return response;
    
  } catch (error) {
    console.error('‚ùå Erro na OpenAI:', error);
    console.log('üîÑ Usando resposta de fallback...');
    return getFallbackResponse(message);
  }
}

function getFallbackResponse(message) {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('bom dia')) {
    return `Ol√°! üëã Bem-vindo(a) √† Cl√≠nica AtendeAI! Como posso ajud√°-lo(a) hoje?

Posso ajudar com:
üóìÔ∏è Agendamento de consultas
‚ÑπÔ∏è Informa√ß√µes sobre servi√ßos  
üìû Contato com nossa equipe
üïê Hor√°rios de funcionamento

Digite sua d√∫vida ou escolha uma das op√ß√µes acima!`;
  }
  
  if (lowerMessage.includes('agendar') || lowerMessage.includes('consulta') || lowerMessage.includes('marcar')) {
    return `üìÖ √ìtimo! Vou te ajudar a agendar sua consulta.

Para prosseguir, preciso de algumas informa√ß√µes:
üë§ Seu nome completo
üìû Seu telefone  
ü©∫ Tipo de consulta desejada
üìÖ Prefer√™ncia de data/hor√°rio

Voc√™ pode me enviar essas informa√ß√µes ou ligar diretamente: (11) 99999-9999`;
  }
  
  if (lowerMessage.includes('hor√°rio') || lowerMessage.includes('funcionamento')) {
    return `üïê Nossos hor√°rios de funcionamento:

üìÖ Segunda a Sexta: 8h √†s 18h
üïê S√°bado: 8h √†s 12h  
‚ùå Domingo: Fechado

üìû Para emerg√™ncias: (11) 99999-9999`;
  }
  
  if (lowerMessage.includes('servi√ßos') || lowerMessage.includes('especialidades')) {
    return `üè• Nossos servi√ßos e especialidades:

ü©∫ Cl√≠nica Geral
‚ù§Ô∏è Cardiologia  
ü¶¥ Ortopedia
üë∂ Pediatria
üß† Neurologia
üî¨ Exames laboratoriais

Para agendar, envie uma mensagem ou ligue: (11) 99999-9999`;
  }
  
  return `Obrigado pela sua mensagem! üòä 

Nossa equipe analisar√° sua solicita√ß√£o e retornar√° em breve.

Para atendimento imediato:
üìû Ligue: (11) 99999-9999
üìç Visite-nos: Rua da Cl√≠nica, 123

Digite "menu" para ver as op√ß√µes dispon√≠veis!`;
}

// =====================================================
// ENVIO DE MENSAGENS WHATSAPP
// =====================================================

async function sendWhatsAppMessage(to, message) {
  try {
    const ACCESS_TOKEN = process.env.WHATSAPP_ACCESS_TOKEN;
    const PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID;
    
    if (!ACCESS_TOKEN || !PHONE_NUMBER_ID) {
      console.log('‚ö†Ô∏è Credenciais do WhatsApp n√£o configuradas, simulando envio...');
      return;
    }

    const url = `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messaging_product: 'whatsapp',
        to: to,
        type: 'text',
        text: {
          body: message
        }
      })
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Mensagem enviada com sucesso:', data);
    } else {
      console.error('‚ùå Erro ao enviar mensagem:', data);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem WhatsApp:', error);
  }
}

// =====================================================
// ROTAS DA API B√ÅSICA
// =====================================================

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'AtendeAI 2.0 Unified Server',
    version: '1.2.0',
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Info do sistema
app.get('/api/info', (req, res) => {
  res.json({
    name: 'AtendeAI 2.0',
    version: '1.2.0',
    description: 'Sistema de gest√£o de cl√≠nicas com IA conversacional',
    services: [
      'WhatsApp Integration',
      'Conversation AI',
      'Clinic Management',
      'Health Monitoring'
    ],
    endpoints: {
      webhook: '/webhook/whatsapp',
      health: '/health',
      info: '/api/info'
    }
  });
});

// Menu de op√ß√µes para teste
app.get('/api/menu', (req, res) => {
  res.json({
    menu: [
      { option: 'agendar', description: 'Agendar consulta' },
      { option: 'hor√°rios', description: 'Ver hor√°rios de funcionamento' },
      { option: 'servi√ßos', description: 'Ver servi√ßos dispon√≠veis' },
      { option: 'contato', description: 'Informa√ß√µes de contato' }
    ]
  });
});

// Fallback para servir o frontend
app.use(express.static('dist'));

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// =====================================================
// TRATAMENTO DE ERROS
// =====================================================

app.use((error, req, res, next) => {
  console.error('‚ùå Erro n√£o tratado:', error);
  res.status(500).json({
    error: 'Erro interno do servidor',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Entre em contato com o suporte'
  });
});

// =====================================================
// INICIALIZA√á√ÉO DO SERVIDOR
// =====================================================

app.listen(PORT, '0.0.0.0', () => {
  console.log(`
üöÄ AtendeAI 2.0 Unified Server iniciado!

üìç Servidor: http://localhost:${PORT}
üåê Ambiente: ${process.env.NODE_ENV || 'development'}
üì± Webhook WhatsApp: /webhook/whatsapp
üîç Health Check: /health
üìä Info da API: /api/info

‚úÖ Pronto para receber webhooks do WhatsApp!
  `);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë Servidor sendo finalizado...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë Servidor sendo finalizado...');
  process.exit(0);
});
