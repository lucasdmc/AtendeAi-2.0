[
    {
      "id": "auth_001",
      "title": "Login Functionality",
      "description": "Test user login with valid and invalid credentials",
      "priority": "high",
      "steps": [
        "Navigate to login page",
        "Enter valid credentials",
        "Verify successful login",
        "Test invalid credentials",
        "Verify error handling"
      ],
      "expected_result": "User can login with valid credentials and see appropriate errors for invalid ones",
      "components": ["src/pages/Auth.tsx", "src/hooks/useAuth.tsx"]
    },
    {
      "id": "auth_002", 
      "title": "Route Protection",
      "description": "Test that protected routes require authentication",
      "priority": "critical",
      "steps": [
        "Access protected route without login",
        "Verify redirect to login page",
        "Login and access protected route",
        "Verify access granted"
      ],
      "expected_result": "Protected routes redirect unauthenticated users to login",
      "components": ["src/components/Layout.tsx", "src/hooks/useAuth.tsx"]
    },
    {
      "id": "clinic_001",
      "title": "Clinic Management CRUD",
      "description": "Test create, read, update, delete operations for clinics",
      "priority": "high",
      "steps": [
        "Navigate to clinics page",
        "Create new clinic",
        "Verify clinic appears in list",
        "Edit clinic information",
        "Delete clinic",
        "Verify clinic removed"
      ],
      "expected_result": "All CRUD operations work correctly for clinics",
      "components": ["src/pages/Clinics.tsx", "src/contexts/ClinicContext.tsx"]
    },
    {
      "id": "clinic_002",
      "title": "Clinic Selector Functionality",
      "description": "Test clinic selection and filtering",
      "priority": "high",
      "steps": [
        "Open clinic selector",
        "Verify clinic list loads",
        "Select different clinic",
        "Verify context updates",
        "Test search functionality"
      ],
      "expected_result": "Clinic selector properly filters and updates context",
      "components": ["src/components/ClinicSelector.tsx", "src/contexts/ClinicContext.tsx"]
    },
    {
      "id": "appointment_001",
      "title": "Appointment Creation",
      "description": "Test creating new appointments",
      "priority": "high",
      "steps": [
        "Navigate to appointments page",
        "Click create appointment",
        "Fill appointment form",
        "Submit appointment",
        "Verify appointment created"
      ],
      "expected_result": "Appointments can be created successfully",
      "components": ["src/pages/Appointments.tsx", "src/components/agenda/AgendamentoModal.tsx"]
    },
    {
      "id": "appointment_002",
      "title": "Calendar View",
      "description": "Test calendar display and navigation",
      "priority": "medium",
      "steps": [
        "Navigate to calendar page",
        "Test month view",
        "Test week view",
        "Test year view",
        "Navigate between dates"
      ],
      "expected_result": "Calendar displays correctly in all views",
      "components": ["src/pages/Agenda.tsx", "src/components/agenda/MonthView.tsx", "src/components/agenda/WeekView.tsx"]
    },
    {
      "id": "conversation_001",
      "title": "Conversation Interface",
      "description": "Test conversation chat interface",
      "priority": "medium",
      "steps": [
        "Navigate to conversations page",
        "Verify chat interface loads",
        "Test message input",
        "Test message sending",
        "Verify message display"
      ],
      "expected_result": "Conversation interface works correctly",
      "components": ["src/pages/Conversations.tsx"]
    },
    {
      "id": "user_001",
      "title": "User Management",
      "description": "Test user management functionality",
      "priority": "medium",
      "steps": [
        "Navigate to users page",
        "Create new user",
        "Edit user information",
        "Delete user",
        "Verify user list updates"
      ],
      "expected_result": "User management operations work correctly",
      "components": ["src/pages/Users.tsx"]
    },
    {
      "id": "ui_001",
      "title": "UI Component Library",
      "description": "Test UI components functionality",
      "priority": "low",
      "steps": [
        "Test button components",
        "Test form components",
        "Test modal components",
        "Test table components",
        "Test navigation components"
      ],
      "expected_result": "All UI components work as expected",
      "components": ["src/components/ui/"]
    },
    {
      "id": "responsive_001",
      "title": "Responsive Design",
      "description": "Test responsive design across different screen sizes",
      "priority": "medium",
      "steps": [
        "Test desktop view",
        "Test tablet view",
        "Test mobile view",
        "Verify layout adapts",
        "Test touch interactions"
      ],
      "expected_result": "Application is responsive across all screen sizes",
      "components": ["src/components/Layout.tsx", "src/components/AppSidebar.tsx"]
    },
    {
      "id": "integration_001",
      "title": "API Integration",
      "description": "Test integration with backend APIs",
      "priority": "high",
      "steps": [
        "Test API calls for clinics",
        "Test API calls for appointments",
        "Test API calls for users",
        "Test error handling",
        "Test loading states"
      ],
      "expected_result": "API integration works correctly with proper error handling",
      "components": ["src/services/api.ts", "src/hooks/useApi.ts"]
    },
    {
      "id": "context_001",
      "title": "Context Management",
      "description": "Test React context state management",
      "priority": "medium",
      "steps": [
        "Test clinic context updates",
        "Test auth context updates",
        "Test context persistence",
        "Test context reset"
      ],
      "expected_result": "Context state management works correctly",
      "components": ["src/contexts/ClinicContext.tsx", "src/hooks/useAuth.tsx"]
    }
]
