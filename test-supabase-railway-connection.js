#!/usr/bin/env node

/**
 * SCRIPT DE TESTE DE CONECTIVIDADE SUPABASE - RAILWAY
 * 
 * Este script testa a conectividade com o Supabase usando diferentes
 * configura√ß√µes para identificar o problema de DNS ENETUNREACH
 */

import { Client } from 'pg';
import { promises as dns } from 'dns';

// Configura√ß√µes de teste
const configs = {
  // Conex√£o direta
  direct: {
    host: 'db.kytphnasmdvebmdvvwtx.supabase.co',
    port: 5432,
    user: 'postgres',
    password: 'lify2025supa',
    database: 'postgres',
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 5
  },
  
  // Session Pooler do Supabase (recomendado)
  sessionPooler: {
    host: 'aws-1-us-east-2.pooler.supabase.com',
    port: 5432,
    user: 'postgres.kytphnasmdvebmdvvwtx',
    password: 'lify2025supa',
    database: 'postgres',
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 5
  },
  
  // Transaction Pooler do Supabase (alternativa)
  transactionPooler: {
    host: 'aws-1-us-east-2.pooler.supabase.com',
    port: 6543,
    user: 'postgres.kytphnasmdvebmdvvwtx',
    password: 'lify2025supa',
    database: 'postgres',
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 5
  }
};

async function testDNSResolution(hostname) {
  console.log(`üîç Testando resolu√ß√£o DNS para: ${hostname}`);
  try {
    const addresses = await dns.resolve4(hostname);
    console.log(`‚úÖ DNS resolvido: ${addresses.join(', ')}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Falha na resolu√ß√£o DNS: ${error.message}`);
    return false;
  }
}

async function testDatabaseConnection(config, name) {
  console.log(`\nüóÑÔ∏è Testando conex√£o ${name}...`);
  console.log(`   Host: ${config.host}`);
  console.log(`   Port: ${config.port}`);
  console.log(`   User: ${config.user}`);
  
  const client = new Client(config);
  
  try {
    await client.connect();
    console.log(`‚úÖ Conex√£o ${name} estabelecida com sucesso!`);
    
    // Testar query simples
    const result = await client.query('SELECT NOW() as current_time, version() as postgres_version');
    console.log(`üìä Query de teste executada:`);
    console.log(`   Hora atual: ${result.rows[0].current_time}`);
    console.log(`   Vers√£o PostgreSQL: ${result.rows[0].postgres_version.split(' ')[0]}`);
    
    await client.end();
    return true;
  } catch (error) {
    console.log(`‚ùå Falha na conex√£o ${name}:`);
    console.log(`   Erro: ${error.message}`);
    console.log(`   C√≥digo: ${error.code}`);
    console.log(`   Detalhes: ${error.detail || 'N/A'}`);
    return false;
  }
}

async function main() {
  console.log('üöÄ INICIANDO TESTE DE CONECTIVIDADE SUPABASE - RAILWAY');
  console.log('=' .repeat(60));
  
  // Testar resolu√ß√£o DNS
  console.log('\n1Ô∏è‚É£ TESTE DE RESOLU√á√ÉO DNS');
  const directDNS = await testDNSResolution(configs.direct.host);
  const sessionPoolerDNS = await testDNSResolution(configs.sessionPooler.host);
  const transactionPoolerDNS = await testDNSResolution(configs.transactionPooler.host);
  
  // Testar conex√µes de banco
  console.log('\n2Ô∏è‚É£ TESTE DE CONEX√ïES DE BANCO');
  const directConnection = await testDatabaseConnection(configs.direct, 'DIRETA');
  const sessionPoolerConnection = await testDatabaseConnection(configs.sessionPooler, 'SESSION POOLER');
  const transactionPoolerConnection = await testDatabaseConnection(configs.transactionPooler, 'TRANSACTION POOLER');
  
  // Resumo dos resultados
  console.log('\nüìã RESUMO DOS TESTES');
  console.log('=' .repeat(60));
  console.log(`DNS Direto: ${directDNS ? '‚úÖ' : '‚ùå'}`);
  console.log(`DNS Session Pooler: ${sessionPoolerDNS ? '‚úÖ' : '‚ùå'}`);
  console.log(`DNS Transaction Pooler: ${transactionPoolerDNS ? '‚úÖ' : '‚ùå'}`);
  console.log(`Conex√£o Direta: ${directConnection ? '‚úÖ' : '‚ùå'}`);
  console.log(`Conex√£o Session Pooler: ${sessionPoolerConnection ? '‚úÖ' : '‚ùå'}`);
  console.log(`Conex√£o Transaction Pooler: ${transactionPoolerConnection ? '‚úÖ' : '‚ùå'}`);
  
  // Recomenda√ß√µes
  console.log('\nüí° RECOMENDA√á√ïES');
  if (sessionPoolerConnection) {
    console.log('‚úÖ Use a configura√ß√£o SESSION POOLER para produ√ß√£o no Railway');
    console.log('   DATABASE_URL=postgresql://postgres.kytphnasmdvebmdvvwtx:lify2025supa@aws-1-us-east-2.pooler.supabase.com:5432/postgres');
  } else if (transactionPoolerConnection) {
    console.log('‚úÖ Use a configura√ß√£o TRANSACTION POOLER como alternativa');
    console.log('   DATABASE_URL=postgresql://postgres.kytphnasmdvebmdvvwtx:lify2025supa@aws-1-us-east-2.pooler.supabase.com:6543/postgres');
  } else if (directConnection) {
    console.log('‚ö†Ô∏è Use a configura√ß√£o DIRETA como fallback');
    console.log('   DATABASE_URL=postgresql://postgres:lify2025supa@db.kytphnasmdvebmdvvwtx.supabase.co:5432/postgres');
  } else {
    console.log('‚ùå Nenhuma conex√£o funcionou. Verifique:');
    console.log('   1. Credenciais corretas no Supabase');
    console.log('   2. Pooler habilitado no projeto');
    console.log('   3. Restri√ß√µes de IP no Supabase');
    console.log('   4. Configura√ß√µes de rede do Railway');
  }
  
  console.log('\nüéØ Para verificar configura√ß√µes do Supabase:');
  console.log('   1. Acesse: https://kytphnasmdvebmdvvwtx.supabase.co');
  console.log('   2. Settings ‚Üí Database ‚Üí Connection Pooling');
  console.log('   3. Verifique se o pooler est√° ativo');
  console.log('   4. Settings ‚Üí Database ‚Üí Network Restrictions');
  console.log('   5. Adicione 0.0.0.0/0 para permitir todas as conex√µes');
}

// Executar teste
main().catch(console.error);
